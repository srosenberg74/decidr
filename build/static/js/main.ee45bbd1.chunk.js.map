{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","listContainer","setListContainer","text","onChangeText","placeholder","setPlaceholder","appState","setAppState","revealFontSize","setRevealFontSize","lastGroup","setLastGroup","selectedItem","setSelectedItem","animatedList","setAnimatedList","viewWidth","setViewWidth","useEffect","window","innerWidth","console","log","length","itemStyle","textAlign","fontSize","verticalAlign","margin","alignSelf","generateList","map","items","index","className","onClick","filter","value","i","deleteItem","style","resetReveal","marginBottom","onSubmit","event","trim","cleanedInput","toLowerCase","find","entry","preventDefault","type","onChange","target","autoFocus","choice","Math","floor","random","chooseAgainWith","item","updatedGroup","chooseAgainWithout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee45bbd1.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [listContainer, setListContainer] = useState([]);\n  const [text, onChangeText] = useState(\"\");\n  const [placeholder, setPlaceholder] = useState(\"enter item here\");\n  const [appState, setAppState] = useState(\"initial\");\n  const [revealFontSize, setRevealFontSize] = useState(\"2.4rem\");\n  const [lastGroup, setLastGroup] = useState([]);\n  const [selectedItem, setSelectedItem] = useState(\"\");\n  const [animatedList, setAnimatedList] = useState(\"reveal-div App-logo\");\n  const [viewWidth, setViewWidth] = useState(0);\n\n  useEffect(() => {\n    setViewWidth(window.innerWidth);\n    console.log(viewWidth);\n    if (viewWidth > 700) {\n      setRevealFontSize(\"6rem\");\n      if (selectedItem.length > 9) {\n        setRevealFontSize(\"3rem\");\n      }\n      if (selectedItem.length < 5) {\n        setRevealFontSize(\"9rem\");\n      }\n    } else {\n      if (selectedItem.length > 7) {\n        setRevealFontSize(\"1.4rem\");\n      }\n    }\n  }, [viewWidth, selectedItem, appState]);\n\n  let itemStyle = {};\n  if (appState === \"reveal\") {\n    itemStyle = {\n      textAlign: \"center\",\n      fontSize: revealFontSize,\n      verticalAlign: \"center\",\n      margin: \"auto\",\n      alignSelf: \"center\",\n    };\n  }\n\n  const deleteItem = (index) =>\n    setListContainer(listContainer.filter((value, i) => i !== index));\n\n  const generateList = listContainer.map((items, index) => (\n    <div key={index}>\n      {appState === \"initial\" && (\n        <button className=\"item-holder\" onClick={() => deleteItem(index)}>\n          <h3 style={itemStyle}>{items}</h3>\n        </button>\n      )}\n      {appState === \"reveal\" && (\n        <div className=\"reveal-holder App-logo\">\n          <h3 style={itemStyle}>{items}</h3>\n        </div>\n      )}\n    </div>\n  ));\n\n  const addItem = (event) => {\n    if (text.trim().length > 0) {\n      const cleanedInput = text.trim().toLowerCase();\n      if (\n        listContainer.find(\n          (entry) => entry.trim().toLowerCase() === cleanedInput\n        )\n      ) {\n        setPlaceholder(\"This is a duplicate entry\");\n        onChangeText(\"\");\n        event.preventDefault();\n        setAppState(\"initial\");\n      } else {\n        setListContainer([...listContainer, text.trim()]);\n        setPlaceholder(\"enter item here\");\n        onChangeText(\"\");\n        event.preventDefault();\n        setAppState(\"initial\");\n        setPlaceholder(\"enter item here\");\n      }\n    } else {\n      setPlaceholder(\"Invalid entry. Item was blank\");\n      event.preventDefault();\n    }\n  };\n\n  const handleChange = (event) => {\n    onChangeText(event.target.value);\n    event.preventDefault();\n  };\n\n  const chooseItem = () => {\n    setLastGroup(listContainer);\n    const choice =\n      listContainer[Math.floor(Math.random() * listContainer.length)];\n    setListContainer([choice]);\n    setSelectedItem(choice);\n    setAppState(\"reveal\");\n    setPlaceholder(\"The decision has been made!\");\n  };\n\n  const resetReveal = () => {\n    setAppState(\"initial\");\n    setAppState(\"reveal\");\n    setAnimatedList(\"reveal-div App-logo\");\n  };\n\n  const chooseAgainWith = () => {\n    const choice = lastGroup[Math.floor(Math.random() * lastGroup.length)];\n    setListContainer([choice]);\n    setSelectedItem(choice);\n    setAnimatedList(\"reveal-div App-logo\");\n    resetReveal();\n  };\n\n  const chooseAgainWithout = () => {\n    // *** this next line should be lastGroup.length < 1, app is behaving incorrectly, need to find bug, unless it is just because of delay in state updating\n    if (lastGroup.length < 2) {\n      setListContainer([\"list is empty\"]);\n      return;\n    }\n    console.log(lastGroup);\n    let updatedGroup = lastGroup.filter((item) => item !== selectedItem);\n    const choice =\n      updatedGroup[Math.floor(Math.random() * updatedGroup.length)];\n    setListContainer([choice]);\n    setSelectedItem(choice);\n    setLastGroup(updatedGroup);\n    setAnimatedList(\"reveal-div App-logo\");\n    resetReveal();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span className=\"header-text\">Decidr</span>\n      </header>\n      {appState === \"initial\" && (\n        <div className=\"list-parent\">\n          {listContainer.length === 0 && (\n            <>\n              <p>Let me help you choose!</p>\n              <p style={{ margin: \".4rem\" }}>\n                Please enter at least two items to select from\n              </p>\n            </>\n          )}\n          <div className=\"list-div\">{generateList}</div>\n          {listContainer.length === 1 && (\n            <p style={{ margin: \"1.2rem\", marginBottom: \"2.4rem\" }}>\n              Enter at least one more item to choose from\n            </p>\n          )}\n          {listContainer.length > 0 && (\n            <p className=\"delete-message\">Click on any item to delete it</p>\n          )}\n        </div>\n      )}\n      {appState === \"reveal\" && (\n        <div className=\"reveal-parent\">\n          <div className={animatedList}>{generateList}</div>\n        </div>\n      )}\n\n      <form onSubmit={addItem}>\n        <input\n          type=\"text\"\n          value={text}\n          onChange={handleChange}\n          placeholder={placeholder}\n          autoFocus\n        ></input>\n        <button className=\"button-style\" type=\"submit\">\n          Add Item\n        </button>\n      </form>\n      {listContainer.length > 1 && (\n        <button className=\"button-style\" onClick={chooseItem}>\n          Select Item\n        </button>\n      )}\n      {appState === \"reveal\" && (\n        <div>\n          <button\n            className=\"button-style\"\n            onClick={() => {\n              setAnimatedList(\"reveal-div reveal-again\");\n              setListContainer(lastGroup);\n              chooseAgainWith();\n            }}\n          >\n            Choose again with {listContainer}\n          </button>\n          <button\n            className=\"button-style\"\n            onClick={() => {\n              setListContainer(\n                lastGroup.filter((item) => item !== selectedItem)\n              );\n              chooseAgainWithout();\n              setAnimatedList(\"reveal-div reveal-again\");\n              console.log(\"new choices:\", listContainer);\n            }}\n          >\n            Choose again without {listContainer}\n          </button>\n          <button\n            className=\"button-style\"\n            onClick={() => {\n              setAppState(\"initial\");\n              setListContainer([]);\n              setPlaceholder(\"enter item here\");\n            }}\n          >\n            Start Over\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}